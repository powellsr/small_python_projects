'''BATTLESHIP!
Bad Aim
Great job! Now we can handle both correct and incorrect guesses from the user. But now lets think a little bit more about the miss condition.

They can enter a guess thats off the board.
They can guess a spot theyve already guessed.
They can just miss the ship.
Well add these tests inside our else condition. Lets build the first case now!

if x not in range(8) or \
   y not in range(3):
  print "Outside the range"
The example above checks if either x or y are outside those ranges. The \ character just continues the if statement onto the next line.

Instructions
1.
Add a new if statement that is nested under the else.

Like the example above, it should check if guess_row is not in range(5) or guess_col is not in range(5).

If that is the case, print out "Oops, that's not even in the ocean."

After your new if statement, add an else that contains your existing handler for an incorrect guess. Dont forget to indent the code!'''

from random import randint

board = []

for x in range(0, 5):
  board.append(["O"] * 5)

def print_board(board):
  for row in board:
    print " ".join(row)

print_board(board)

def random_row(board):
  return randint(0, len(board) - 1)

def random_col(board):
  return randint(0, len(board[0]) - 1)

ship_row = random_row(board)
ship_col = random_col(board)
print ship_row
print ship_col

guess_row = int(raw_input("Guess Row: "))
guess_col = int(raw_input("Guess Col: "))

# Write your code below!
if guess_row == ship_row and guess_col == ship_col:
  print "Congratulations! You sank my battleship!"
else:
  if guess_row not in range(5) or \
  guess_col not in range(5):# This slash allows if statement to continue on next line. This line(s), previous two can be one line, check for out of range guesses. Note: can't comment after character continuation slash!
    print "Oops, that's not even in the ocean."
  else:
  	print "You missed my battleship!"
  	board[guess_row][guess_col] = "X" #note: this notation calls the first bracket from the board, the second bracket value from the list defined by the first bracket, I think
  print_board(board)